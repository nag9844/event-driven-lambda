name: Deploy S3 Event Lambda Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: s3-lambda-processor
  TERRAFORM_VERSION: 1.6.0

jobs:
  build-and-push:
    name: Build and Push Lambda Container
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    - name: Generate image tag
      id: image-tag
      run: |
        TAG=$(echo $GITHUB_SHA | head -c8)
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
      run: |
        cd lambda
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: aws-account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Create terraform.tfvars
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-account.outputs.account-id }}
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        bucket_name = "s3-event-lambda-bucket-${{ github.run_number }}"
        lambda_function_name = "s3-event-processor"
        ecr_repository_uri = "$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY"
        image_tag = "$IMAGE_TAG"
        
        common_tags = {
          Project     = "S3EventLambda"
          Environment = "production"
          ManagedBy   = "Terraform"
          GitHubRun   = "${{ github.run_number }}"
        }
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -input=false

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      id: aws-account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

    - name: Create terraform.tfvars
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-account.outputs.account-id }}
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        bucket_name = "s3-event-lambda-bucket-${{ github.run_number }}"
        lambda_function_name = "s3-event-processor"
        ecr_repository_uri = "$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY"
        image_tag = "$IMAGE_TAG"
        
        common_tags = {
          Project     = "S3EventLambda"
          Environment = "production"
          ManagedBy   = "Terraform"
          GitHubRun   = "${{ github.run_number }}"
        }
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

    - name: Output Infrastructure Details
      run: |
        echo "## ðŸš€ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Lambda Function**: $(terraform output -raw lambda_function_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudWatch Log Group**: $(terraform output -raw cloudwatch_log_group)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Testing:" >> $GITHUB_STEP_SUMMARY
        echo "Upload a file to the S3 bucket to trigger the Lambda function and check CloudWatch logs." >> $GITHUB_STEP_SUMMARY

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for infrastructure to be ready
      run: |
        echo "Waiting 30 seconds for infrastructure to be fully ready..."
        sleep 30

    - name: Test S3 upload and Lambda trigger
      run: |
        # Create a test file
        echo "Test file created at $(date)" > test-file.txt
        
        # Get the bucket name (you might need to store this as an artifact from terraform-apply)
        BUCKET_NAME="s3-event-lambda-bucket-${{ github.run_number }}"
        
        # Upload test file
        aws s3 cp test-file.txt s3://$BUCKET_NAME/test-file.txt
        
        echo "Test file uploaded to S3. Check CloudWatch logs for Lambda execution."