# .github/workflows/terraform.yaml
name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # *** ADD THIS TRIGGER: Listen for successful completion of the build-push workflow ***
  workflow_run:
    workflows: ["Build and Push Lambda Docker Image to ECR"]
    types:
      - completed
    branches:
      - main # Only run for the main branch builds

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}
  S3_BUCKET_NAME: "custom-usecase-bucket" # Must be globally unique
  LAMBDA_FUNCTION_NAME: "s3-file-logger-lambda"

jobs:
  # This job retrieves the output from the completed workflow_run
  get_image_uri:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    outputs:
      image_uri: ${{ steps.get_output.outputs.image_uri }}
    steps:
      - name: Get workflow run outputs
        id: get_output
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRun = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.event.workflow_run.id
            });
            const buildJob = workflowRun.data.jobs.find(job => job.name === 'build-and-push');
            const buildOutput = buildJob.outputs.image_uri;
            console.log(`Retrieved image_uri: ${buildOutput}`);
            core.setOutput('image_uri', buildOutput);

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [get_image_uri] # *** DEPEND ON THE JOB THAT GETS THE IMAGE URI ***
    if: |
      (github.event_name == 'pull_request' || github.event_name == 'push') || # Original triggers
      (github.event_name == 'workflow_run' && needs.get_image_uri.outputs.image_uri != null) # New trigger after image build

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Determine Lambda Image URI
        id: lambda_image_uri_step
        run: |
          # If triggered by workflow_run, use the output from get_image_uri
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "LAMBDA_IMAGE_URI=${{ needs.get_image_uri.outputs.image_uri }}" >> $GITHUB_ENV
          # Otherwise, assume it's a push/PR on main and use a default/last known image for plan
          # This assumes that a plan for code changes will use the current image in TF state
          else
            echo "LAMBDA_IMAGE_URI=N/A_FOR_PLAN_ONLY" >> $GITHUB_ENV # Placeholder for plan
            # Or you could try to fetch the current image URI from ECR here
          fi
        shell: bash

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'push' # Still run on PR for infra changes
        run: terraform plan -no-color -input=false -var="s3_bucket_name=${{ env.S3_BUCKET_NAME }}" -var="lambda_function_name=${{ env.LAMBDA_FUNCTION_NAME }}" -var="lambda_image_uri=${{ env.LAMBDA_IMAGE_URI }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Pull Request with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–
            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}

      - name: Terraform Apply
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
        run: |
          # Use the determined LAMBDA_IMAGE_URI, which will be from the workflow_run output if available
          terraform apply -auto-approve -input=false \
            -var="s3_bucket_name=${{ env.S3_BUCKET_NAME }}" \
            -var="lambda_function_name=${{ env.LAMBDA_FUNCTION_NAME }}" \
            -var="lambda_image_uri=${{ env.LAMBDA_IMAGE_URI }}"